version: "3"
services:
  # CAS Server
  entrada:
    build: ./cas-oauth
    image: apereo/cas-oauth
    ports:
      - "8001:8080"
    volumes:
      - ./cas.properties:/etc/cas/config/cas.properties
    healthcheck:
      test: ["CMD-SHELL", "grep  -rnw '/tmp/logs/' -e 'Ready to process requests'"]
      interval: 5s
      timeout: 5s
      retries: 60

  # Reverse proxy to access different backends
  proxy:
    image: traefik:v2.5
    ports:
      - "80:80"
      - "8080:8080"
    command:
      # - "--log.level=DEBUG"
      - "--api"
      - "--api.dashboard"
      - "--api.insecure" # Don't do that in production
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      default:
        aliases:
          - api.umes
          
  # API Docs
  apidocs:
    build: ./api-docs
    image: springboot/api-docs
    labels:
      - "traefik.http.routers.apidocs.rule=Host(`apidocs.umes`)"
      - "traefik.http.services.apidocs.loadbalancer.server.port=8080"
    volumes:
      - ./application_apidocs.yml:/app/config/application.yml
    depends_on:
      - api1
      - api2

  # VUEJS FRONTEND APP
  front:
    build: ./oidc-vuejs
    image: vuejs/oidc
    labels:
      - "traefik.http.routers.front.rule=Host(`micampus.umes`)"
      - "traefik.http.services.front.loadbalancer.server.port=8080"
    depends_on:
      entrada:
        condition: service_healthy

  # CLASSIC CAS FILTERED WEBAPP
  rrhh:
    build: ./cas-app
    image: casfilter/cas
    labels:
      - "traefik.http.routers.rrhh.rule=Host(`rrhh.umes`)"
      - "traefik.http.services.rrhh.loadbalancer.server.port=8080"
    depends_on:
      entrada:
        condition: service_healthy
  
  # MODERN WEB APP WITH OIDC-PKCE FLOW
  pkce:
    build: ./oidc-pkce
    image: springboot/oidc-pkce
    labels:
      - "traefik.http.routers.pkce.rule=Host(`pkce.umes`)"
      - "traefik.http.services.pkce.loadbalancer.server.port=8080"
    volumes:
      - ./application_pkce.yml:/app/config/application.yml
    depends_on:
     entrada:
        condition: service_healthy

  #
  # ALL THIS APIs ARE HIDE BEHIND KRAKEND
  #
  api1:
    build: ./oidc-api
    image: springboot/oidc-api
    labels:
      - "traefik.http.routers.api1.rule=Host(`api.umes`) && (PathPrefix(`/oauth/api1/`) || PathPrefix(`/public/api1/`))"
      - "traefik.http.services.api1.loadbalancer.server.port=8080"
      - "traefik.http.routers.api1.middlewares=corsHeader" 
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolallowmethods=GET,OPTIONS,PUT"
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.corsheader.headers.accesscontrolalloworiginlist=http://apidocs.umes,http://micampus.umes"
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.corsHeader.headers.addvaryheader=true"
    environment:
      - SNAME=api1
      - CASCLIENT=api1
    volumes:
      - ./application_api.yml:/app/config/application.yml
    depends_on:
     entrada:
        condition: service_healthy

  api2:
    build: ./oidc-api
    image: springboot/oidc-api
    labels:
      - "traefik.http.routers.api2.rule=Host(`api.umes`) && (PathPrefix(`/oauth/api2/`) || PathPrefix(`/public/api2/`))"
      - "traefik.http.services.api2.loadbalancer.server.port=8080"
      - "traefik.http.routers.api2.middlewares=corsHeader" 
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolallowmethods=GET,OPTIONS,PUT"
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.corsheader.headers.accesscontrolalloworiginlist=http://apidocs.umes,http://micampus.umes"
      - "traefik.http.middlewares.corsHeader.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.corsHeader.headers.addvaryheader=true"
    environment:
      - SNAME=api2
      - CASCLIENT=api2
    volumes:
      - ./application_api.yml:/app/config/application.yml
    depends_on:
     entrada:
        condition: service_healthy
